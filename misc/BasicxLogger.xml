<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BasicxLogger</name>
    </assembly>
    <members>
        <member name="T:BasicxLogger.Databases.MySqlDatabase">
            <summary>
            Class that represents a database
            </summary>
        </member>
        <member name="P:BasicxLogger.Databases.MySqlDatabase.Server">
            <summary>
            URL of the MySql database server
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.Databases.MySqlDatabase.Database">
            <summary>
            Name of the database that will contain the logs
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.Databases.MySqlDatabase.Table">
            <summary>
            Name of the table the logger will create and insert logs into
            </summary>
        </member>
        <member name="M:BasicxLogger.Databases.MySqlDatabase.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Databases.MySqlDatabase"/> class.
            </summary>
            <param name="server">URL of the MySql database server</param>
            <param name="database">Name of the database that will contain the logs</param>
            <param name="table">Name of the table the logger will create and insert logs into</param>
            <param name="user">Username of the database user you want to use</param>
            <param name="password">Password of the given user</param>
            <param name="port">Port of the database server</param>
            <param name="sslMode">SSL Mode setting</param>
        </member>
        <member name="M:BasicxLogger.Databases.MySqlDatabase.LogToDatabase(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the Table in the Database.
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Databases.ILogDatabase">
            <summary>
            Interface that represents a database for the <see cref="T:BasicxLogger.DatabaseLogger"/>
            </summary>
        </member>
        <member name="P:BasicxLogger.Databases.ILogDatabase.Server">
            <summary>
            URL of the database server
            </summary>
        </member>
        <member name="P:BasicxLogger.Databases.ILogDatabase.Database">
            <summary>
            Name of the database that will contain the logs
            </summary>
        </member>
        <member name="P:BasicxLogger.Databases.ILogDatabase.Table">
            <summary>
            Name of the table the logger will create and insert logs into
            </summary>
        </member>
        <member name="M:BasicxLogger.Databases.ILogDatabase.LogToDatabase(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the Table in the Database.
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Files.JsonLogFile">
            <summary>
            Class that represents a log file with the file extension .json
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.JsonLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.JsonLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.JsonLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="M:BasicxLogger.Files.JsonLogFile.WriteToFile``1(``0)">
            <summary>
            Writes the given object to the log file
            </summary>
            <param name="logObject">The object that will be writen to the json file</param>
        </member>
        <member name="T:BasicxLogger.Files.LogLogFile">
            <summary>
            Class that represents a log file with the file extension .log
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.LogLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.LogLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.LogLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Files.TxtLogFile">
            <summary>
            Class that represents a log file with the file extension .txt
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.TxtLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.TxtLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.TxtLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Files.XmlLogFile">
            <summary>
            Class that represents a log file with the file extension .xml
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.XmlLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.XmlLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.XmlLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Files.ILogFile">
            <summary>
            Interface that represents a file for the <see cref="T:BasicxLogger.FileLogger"/>
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.ILogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file.
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.ILogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.ILogFile.FullName">
            <summary>
            Gets the full path of the file.
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.ILogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.ILogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file.
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.IdHandler">
            <summary>
            A static class used for id generation
            </summary>
        </member>
        <member name="P:BasicxLogger.IdHandler.UniqueId">
            <summary>
            Gets a unique id string
            </summary>
            <returns>
            A string that conatins a unique id
            </returns>
        </member>
        <member name="T:BasicxLogger.LogTag">
            <summary>
            Enum that contains the message tags, that can be used for logging
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.INFO">
            <summary>
            Tag: [INFO]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.WARNING">
            <summary>
            Tag: [WARNING]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.ERROR">
            <summary>
            Tag: [ERROR]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.FATAL">
            <summary>
            Tag: [FATAL]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.EXCEPTION">
            <summary>
            Tag: [EXCEPTION]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.DEBUGGING">
            <summary>
            Tag: [DEBUGGING]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.MESSAGE">
            <summary>
            Tag: [MESSAGE]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.ALERT">
            <summary>
            Tag: [ALERT]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.EVENT">
            <summary>
            Tag: [EVENT]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.TEST">
            <summary>
            Tag: [TEST]
            </summary>
        </member>
        <member name="F:BasicxLogger.LogTag.none">
            <summary>
            No Tag. Default value for the DefaultTag
            </summary>
        </member>
        <member name="T:BasicxLogger.Timestamp">
            <summary>
            Timestamp class to configure and create timestamps
            </summary>
        </member>
        <member name="P:BasicxLogger.Timestamp.Format">
            <summary>
            Gets the datetime format used by the current timestamp instance.
            </summary>
        </member>
        <member name="P:BasicxLogger.Timestamp.DateSeparator">
            <summary>
            Gets or Sets the string, that is used to separate each part of the date.
            </summary>
        </member>
        <member name="P:BasicxLogger.Timestamp.Culture">
            <summary>
            Gets or Sets the culture setting for the formation of AM and PM.
            </summary>
        </member>
        <member name="M:BasicxLogger.Timestamp.GetTimestamp">
            <summary>
            Get the current timestamp.
            </summary>
            <returns>
            Timstamp as string
            </returns>
        </member>
        <member name="P:BasicxLogger.Timestamp.Year_Month_Day_Hour24_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "yyyy'/'MM'/'dd HH:mm:ss"
            </remarks>
        </member>
        <member name="P:BasicxLogger.Timestamp.Year_Month_Day_Hour12_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "yyyy'/'MM'/'dd hh:mm:ss tt"
            </remarks>
        </member>
        <member name="P:BasicxLogger.Timestamp.Year_Day_Month_Hour24_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "yyyy'/'dd'/'MM HH:mm:ss"
            </remarks>
        </member>
        <member name="P:BasicxLogger.Timestamp.Year_Day_Month_Hour12_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "yyyy'/'dd'/'MM hh:mm:ss tt"
            </remarks>
        </member>
        <member name="P:BasicxLogger.Timestamp.Day_Month_Year_Hour24_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "dd'/'MM'/'yyyy HH:mm:ss"
            </remarks>
        </member>
        <member name="P:BasicxLogger.Timestamp.Day_Month_Year_Hour12_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "dd'/'MM'/'yyyy hh:mm:ss tt"
            </remarks>
        </member>
        <member name="P:BasicxLogger.Timestamp.Month_Day_Year_Hour24_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "MM'/'dd'/'yyyy HH:mm:ss"
            </remarks>
        </member>
        <member name="P:BasicxLogger.Timestamp.Month_Day_Year_Hour12_Min_Sec">
            <summary>
            Gets a <see cref="T:BasicxLogger.Timestamp"/> with the selected format.
            </summary>
            <remarks>
            Formate: "MM'/'dd'/'yyyy hh:mm:ss tt"
            </remarks>
        </member>
        <member name="T:BasicxLogger.Exceptions.NoLoggerAddedException">
            <summary>
            The exception that is thrown when a Log method of the <see cref="T:BasicxLogger.MultiLogger"/> is called 
            but no <see cref="T:BasicxLogger.ILogger"/> was added befor  
            </summary>
        </member>
        <member name="M:BasicxLogger.Exceptions.NoLoggerAddedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Exceptions.NoLoggerAddedException"/> class
            </summary>
        </member>
        <member name="M:BasicxLogger.Exceptions.NoLoggerAddedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Exceptions.NoLoggerAddedException"/> class
            </summary>
        </member>
        <member name="M:BasicxLogger.Exceptions.NoLoggerAddedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Exceptions.NoLoggerAddedException"/> class
            </summary>
        </member>
        <member name="T:BasicxLogger.ILogger">
            <summary>
            Interface for BasicxLogger
            </summary>
        </member>
        <member name="P:BasicxLogger.ILogger.MessageTimestamp">
            <summary>
            Gets the <see cref="T:BasicxLogger.Timestamp"/> that is used by the logger.
            </summary>
        </member>
        <member name="P:BasicxLogger.ILogger.DefaultTag">
            <summary>
            Gets or Sets a default message tag that will be used if no tag is selected.
            </summary>
        </member>
        <member name="P:BasicxLogger.ILogger.UseId">
            <summary>
            Gets or Sets if each log entry should contain a unique id or not.
            </summary>
        </member>
        <member name="M:BasicxLogger.ILogger.Log(System.String)">
            <summary>
            Logs the given message.
            </summary>
            <param name="message">The message that will be logged</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.ILogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.ILogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.ILogger.Log(BasicxLogger.LogTag,System.String)">
            <summary>
            Logs the given message.
            </summary>
            <param name="message">The message that will be logged</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.ILogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.ILogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.ILogger.LogAsync(System.String)">
            <summary>
            Asynchronous logs the given message.
            </summary>
            <param name="message">The message that will be logged</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.ILogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.ILogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.ILogger.LogAsync(BasicxLogger.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message.
            </summary>
            <param name="message">The message that will be logged</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.ILogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.ILogger.UseId"/> is false.
            </returns>
        </member>
        <member name="T:BasicxLogger.DatabaseLogger">
            <summary>
            Logger that contains everything needed to log to an MySql database.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.Database">
            <summary>
            Gets the database that the logger uses.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.MessageTimestamp">
            <summary>
            Gets or Sets the <see cref="T:BasicxLogger.Timestamp"/> that is used by the logger.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.DefaultTag">
            <summary>
            Gets or Sets a default message tag that will be used if no tag is selected.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.UseId">
            <summary>
            Gets or Sets if each log entry should contain a unique id or not.
            </summary>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.#ctor(BasicxLogger.Databases.ILogDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.DatabaseLogger"/> class.
            </summary>
            <param name="database">The database the logger should use.</param>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.Log(System.String)">
            <summary>
            Writes the given message to the table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.Log(BasicxLogger.LogTag,System.String)">
            <summary>
            Writes the given message to the table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.LogAsync(System.String)">
            <summary>
            Asynchronous writes the given message to the table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.LogAsync(BasicxLogger.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message to table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="T:BasicxLogger.FileLogger">
            <summary>
            File logger that contains everything needed to write a message to a log file.
            </summary>
            <remarks>
            This logger supports the following file formats: txt, log, xml and json
            </remarks>
        </member>
        <member name="P:BasicxLogger.FileLogger.LogFile">
            <summary>
            Gets the <see cref="!:BasicxLogger.ILogFile"/> that is used by the logger.
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.MessageTimestamp">
            <summary>
            Gets or Sets the <see cref="T:BasicxLogger.Timestamp"/> that is used by the logger.
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.DefaultTag">
            <summary>
            Gets or Sets a default message tag that will be used if no tag is selected.
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.UseId">
            <summary>
            Gets or Sets if each log entry should contain a unique id or not.
            </summary>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.FileLogger"/> class,
            that uses the default settings.
            </summary>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.Files.ILogFile)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.FileLogger"/> class.
            </summary>
            <param name="logFile">The log file of the logger</param>
        </member>
        <member name="M:BasicxLogger.FileLogger.Log(System.String)">
            <summary>
            Writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.FileLogger.Log(BasicxLogger.LogTag,System.String)">
            <summary>
            Writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogAsync(System.String)">
            <summary>
            Asynchronous writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogAsync(BasicxLogger.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="T:BasicxLogger.JsonLogger`1">
            <summary>
            A logger that allows you to log your owne objects to a json file
            </summary>
        </member>
        <member name="P:BasicxLogger.JsonLogger`1.LogFile">
            <summary>
            Gets the <see cref="T:BasicxLogger.Files.JsonLogFile"/> that is used by the logger.
            </summary>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.#ctor(BasicxLogger.Files.JsonLogFile)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.JsonLogger`1"/> class.
            </summary>
            <param name="jsonLogFile">The json log file used by the logger</param>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.Log(`0)">
            <summary>
            Adds the given object to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="logObject">
            The object that will be added to the json file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.LogAsync(`0)">
            <summary>
            Asynchronous adds the given object to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="logObject">
            The object that will be added to the json file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="T:BasicxLogger.MultiLogger">
            <summary>
            A logger that allows you to add all loggers that use the ILogger interface and 
            log with all of them by only using one log method call.
            </summary>
            <remarks>
            The multi logger supports all logger that uses the ILogger intaterface.
            </remarks>
        </member>
        <member name="P:BasicxLogger.MultiLogger.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BasicxLogger.MultiLogger"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:BasicxLogger.MultiLogger"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:BasicxLogger.MultiLogger.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:BasicxLogger.MultiLogger"/>.
            </returns>
        </member>
        <member name="P:BasicxLogger.MultiLogger.System#Collections#Generic#IList{BasicxLogger#ILogger}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>
            The element at the specified index.
            </returns>
        </member>
        <member name="P:BasicxLogger.MultiLogger.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>
            The element at the specified index.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.MultiLogger"/> class
            </summary>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Log(System.String)">
            <summary>
            Logs the given message with every <see cref="T:BasicxLogger.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Log(BasicxLogger.LogTag,System.String)">
            <summary>
            Logs the given message with every <see cref="T:BasicxLogger.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogAsync(System.String)">
            <summary>
            Asynchronous logs the given message with every <see cref="T:BasicxLogger.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogAsync(BasicxLogger.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message with every <see cref="T:BasicxLogger.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.IndexOf(BasicxLogger.ILogger)">
            <summary>
            Determines the index of a specific item in the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Insert(System.Int32,BasicxLogger.ILogger)">
            <summary>
            Inserts an item to the <see cref="T:BasicxLogger.MultiLogger"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:BasicxLogger.MultiLogger"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:BasicxLogger.MultiLogger"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:BasicxLogger.MultiLogger"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Add(BasicxLogger.ILogger)">
            <summary>
            Adds an item to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Clear">
            <summary>
            Removes all items from the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Contains(BasicxLogger.ILogger)">
            <summary>
            Determines whether the <see cref="T:BasicxLogger.MultiLogger"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <returns>
            true if item is found in the System.Collections.Generic.ICollection`1; otherwise, false.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.CopyTo(BasicxLogger.ILogger[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:BasicxLogger.MultiLogger"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied 
            from <see cref="T:BasicxLogger.MultiLogger"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BasicxLogger.MultiLogger"/>
            is greater than the available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Remove(BasicxLogger.ILogger)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:BasicxLogger.MultiLogger"/> otherwise, false. 
            This method also returns false if item is not found in the original <see cref="T:BasicxLogger.MultiLogger"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BasicxLogger.ILogger"/> collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the <see cref="T:BasicxLogger.ILogger"/> collection.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.System#Collections#Generic#IEnumerable{BasicxLogger#ILogger}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BasicxLogger.ILogger"/> collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the <see cref="T:BasicxLogger.ILogger"/> collection.
            </returns>
        </member>
        <member name="T:BasicxLogger.Models.CustomJsonLogModel`1">
            <summary>
            Data model for the custom json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.CustomJsonLogModel`1.entrys">
            <summary>
            List of custom log objects
            </summary>
        </member>
        <member name="T:BasicxLogger.Models.JsonLogModel">
            <summary>
            Data model for the json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.JsonLogModel.entrys">
            <summary>
            List of log messages
            </summary>
        </member>
        <member name="T:BasicxLogger.Models.LogMessageModel">
            <summary>
            Data model for one log message in a json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.id">
            <summary>
            The log message id
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.timestamp">
            <summary>
            The log message timestamp
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.tag">
            <summary>
            The log message tag
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.message">
            <summary>
            The log message
            </summary>
        </member>
        <member name="T:BasicxLogger.Logger">
            <summary>
            Default Logger class that contains everything needed to write a message to a log file.
            </summary>
            <remarks>
            This logger supports the following file formats: txt, log, xml and json
            </remarks>
        </member>
        <member name="P:BasicxLogger.Logger.logFile">
            <summary>
            Contains all informations about the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.Logger.logDirectory">
            <summary>
            Contains all informations about the log directory
            </summary>
        </member>
        <member name="P:BasicxLogger.Logger.messageFormat">
            <summary>
            Contains all informations about the formatting of the log messages
            </summary>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor">
            <summary>
            Constructor, to create a simple logger object that uses the default settings
            </summary>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.MessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.MessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.MessageFormat,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.MessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.MessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.MessageFormat,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.MessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.MessageFormat,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.MessageFormat,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.MessageFormat,BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.MessageFormat,BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.log(System.String)">
            <summary>
            Writes the given message and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.log(BasicxLogger.Message.Tag,System.String)">
            <summary>
            Writes the given message with the given tag and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logID(System.String,System.Boolean)">
            <summary>
            Writes the given message, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logID(BasicxLogger.Message.Tag,System.String,System.Boolean)">
            <summary>
            Writes the given message with the given tag, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomID(System.String,System.String)">
            <summary>
            Writes the given message, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomID(System.String,BasicxLogger.Message.Tag,System.String)">
            <summary>
            Writes the given message with the given tag, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logAsync(System.String)">
            <summary>
            Asynchronous writes the given message and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logAsync(BasicxLogger.Message.Tag,System.String)">
            <summary>
            Asynchronous writes the given message with the given tag and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logIDAsync(System.String,System.Boolean)">
            <summary>
            Asynchronous writes the given message, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logIDAsync(BasicxLogger.Message.Tag,System.String,System.Boolean)">
            <summary>
            Asynchronous writes the given message with the given tag, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomIDAsync(System.String,System.String)">
            <summary>
            Asynchronous writes the given message, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomIDAsync(System.String,BasicxLogger.Message.Tag,System.String)">
            <summary>
            Asynchronous writes the given message with the given tag, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.getFullFilePath">
            <returns>
            The full file path (e.g. C:\mypath\myfile.txt)
            </returns>
        </member>
        <member name="M:BasicxLogger.Logger.deleteLogFile">
            <summary>
            Deletes the log file, that was created by the logger.
            </summary>
            <remarks>
            All logs will be lost. If you log again after deleting the log file, the logger will create a new file.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="T:BasicxLogger.LoggerFile.LogFile">
            <summary>
            Contains all informations about the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerFile.LogFile.Name">
            <summary>
            Name of the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerFile.LogFile.Type">
            <summary>
            File type of the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerFile.LogFile.FullName">
            <summary>
            Full file name (name + file type : e.g. sample.txt)
            </summary>
        </member>
        <member name="M:BasicxLogger.LoggerFile.LogFile.#ctor(System.String,BasicxLogger.LoggerFile.FileType)">
            <summary>
            Constructor, to create a LogFile object.
            </summary>
            <remarks>
            Can be used to configure a custom file for the logger
            </remarks>
            <param name="name">
            Name of the log file
            </param>
            <param name="type">
            File type of the log file
            </param>
        </member>
        <member name="T:BasicxLogger.LoggerFile.FileType">
            <summary>
            Enum that contains every supported file type
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.txt">
            <summary>
            File type: .txt
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.log">
            <summary>
            File type: .log
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.xml">
            <summary>
            File type: .xml
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.json">
            <summary>
            File type: .json
            </summary>
        </member>
        <member name="T:BasicxLogger.LoggerDirectory.LogDirectory">
            <summary>
            Contains all informations about the log directory
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerDirectory.LogDirectory.Path">
            <summary>
            Path were the log directory is located
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerDirectory.LogDirectory.Name">
            <summary>
            Name of the log directory
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerDirectory.LogDirectory.FullPath">
            <summary>
            Full directory path (path + name)
            </summary>
        </member>
        <member name="M:BasicxLogger.LoggerDirectory.LogDirectory.#ctor(System.String,System.String)">
            <summary>
            Constructor, to create a LogDirectory object.
            </summary>
            <remarks>
            Can be used to configure a custom directory for the logger
            </remarks>
            <param name="path">
            Path where the directory is located
            </param>
            <param name="name">
            Name of the log directory
            </param>
        </member>
        <member name="T:BasicxLogger.Message.Date">
            <summary>
            Contains the information about the date formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.Date.Format">
            <summary>
            Enum that contains the formate of the date
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.Date.Separator">
            <summary>
            Char that separates each part of the date
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.Date.FormatString">
            <summary>
            Format string for the date (e.g. yyyy'-'MM'-'dd)
            </summary>
        </member>
        <member name="M:BasicxLogger.Message.Date.#ctor(BasicxLogger.Message.DateFormat)">
            <summary>
            Constructor, to create a Date object.
            </summary>
            <remarks>
            Can be used to configure a custom date formate for the logger message formate
            </remarks>
            <param name="dateFormat">
            Enum that contains the formate of the date
            </param>
        </member>
        <member name="M:BasicxLogger.Message.Date.#ctor(BasicxLogger.Message.DateFormat,System.Char)">
            <summary>
            Constructor, to create a Date object.
            </summary>
            <remarks>
            Can be used to configure a custom date formate for the logger message formate
            </remarks>
            <param name="dateFormat">
            Enum that contains the formate of the date
            </param>
            <param name="dateSeparator">
            Char that separates each part of the date
            </param>
        </member>
        <member name="T:BasicxLogger.Message.DateFormat">
            <summary>
            Enum that contains every supported date format
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.year_month_day">
            <summary>
            Formate: "yyyy'/'MM'/'dd"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.year_day_month">
            <summary>
            Formate: "yyyy'/'dd'/'MM"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.day_month_year">
            <summary>
            Formate: "dd'/'MM'/'yyyy"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.month_day_year">
            <summary>
            Formate: "MM'/'dd'/'yyyy"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.none">
            <summary>
            Select, if you dont want to have the time in your log file
            </summary>
        </member>
        <member name="T:BasicxLogger.Message.Time">
            <summary>
            Contains the information about the time formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.Time.Format">
            <summary>
            Enum that contains the formate of the time
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.Time.FormatString">
            <summary>
            Format string for the time (e.g. HH:mm:ss)
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.Time.CultureFormat">
            <summary>
            Holds the culture information to correctly display AM/PM, when the 12 hour time formate is used
            </summary>
        </member>
        <member name="M:BasicxLogger.Message.Time.#ctor(BasicxLogger.Message.TimeFormat)">
            <summary>
            Constructor, to create a Time object.
            </summary>
            <remarks>
            Can be used to configure a custom time formate for the logger message formate
            </remarks>
            <param name="timeFormat">
            Enum that contains the formate of the time
            </param>
        </member>
        <member name="M:BasicxLogger.Message.Time.#ctor(BasicxLogger.Message.TimeFormat,System.Globalization.CultureInfo)">
            <summary>
            Constructor, to create a Time object.
            </summary>
            <remarks>
            Can be used to configure a custom time formate for the logger message formate
            </remarks>
            <param name="timeFormat">
            Enum that contains the formate of the time
            </param>
            <param name="cultureInfo">
            The culture information to correctly display AM/PM, when the 12 hour time formate is used
            </param>
        </member>
        <member name="T:BasicxLogger.Message.TimeFormat">
            <summary>
            Enum that contains every supported time format
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour24_min">
            <summary>
            Formate: "HH:mm"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour24_min_sec">
            <summary>
            Formate: "HH:mm:ss"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour24_min_sec_millisec">
            <summary>
            Formate: "HH:mm:ss.fff"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour12_min">
            <summary>
            Formate:  "hh:mm tt"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour12_min_sec">
            <summary>
            Formate:  "hh:mm:ss tt"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour12_min_sec_millisec">
            <summary>
            Formate: "hh:mm:ss.fff tt"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.none">
            <summary>
            Select, if you dont want to have the time in your log file
            </summary>
        </member>
        <member name="T:BasicxLogger.Message.MessageFormat">
            <summary>
            Contains all informations about the formatting of the log messages
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.MessageFormat.Date">
            <summary>
            Contains the information about the date formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.MessageFormat.Time">
            <summary>
            Contains the information about the time formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.MessageFormat.DefaultTag">
            <summary>
            A default message tag that will be used if no tag is selected
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.MessageFormat.TextEncoding">
            <summary>
            Encoding for the log message
            </summary>
            <remarks>
            This option is not supported for json logging and will be ignored if you log to a json file
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Tag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Time)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date,BasicxLogger.Message.Time)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date,BasicxLogger.Message.Tag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date,BasicxLogger.Message.Time,BasicxLogger.Message.Tag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date,BasicxLogger.Message.Tag,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date,BasicxLogger.Message.Time,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Date,BasicxLogger.Message.Time,BasicxLogger.Message.Tag,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Time,BasicxLogger.Message.Tag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Time,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.MessageFormat.#ctor(BasicxLogger.Message.Time,BasicxLogger.Message.Tag,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="T:BasicxLogger.Message.Tag">
            <summary>
            Enum that contains every message tag you can use
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.INFO">
            <summary>
            Tag: [INFO]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.WARNING">
            <summary>
            Tag: [WARNING]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.ERROR">
            <summary>
            Tag: [ERROR]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.FATAL">
            <summary>
            Tag: [FATAL]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.EXCEPTION">
            <summary>
            Tag: [EXCEPTION]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.DEBUGGING">
            <summary>
            Tag: [DEBUGGING]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.MESSAGE">
            <summary>
            Tag: [MESSAGE]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.ALERT">
            <summary>
            Tag: [ALERT]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.EVENT">
            <summary>
            Tag: [EVENT]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.TEST">
            <summary>
            Tag: [TEST]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.Tag.none">
            <summary>
            If you dont want to have a tag
            </summary>
        </member>
    </members>
</doc>
