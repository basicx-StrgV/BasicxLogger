<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BasicxLogger</name>
    </assembly>
    <members>
        <member name="T:BasicxLogger.ILogger">
            <summary>
            Interface for BasicxLogger
            </summary>
        </member>
        <member name="M:BasicxLogger.ILogger.Log(System.String)">
            <summary>
            Logs the given message and the current time.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
        </member>
        <member name="M:BasicxLogger.ILogger.Log(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Logs the given message with the given tag and the current time stamp.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
        </member>
        <member name="M:BasicxLogger.ILogger.LogId(System.String,System.Boolean)">
            <summary>
            Logs the given message, a message ID and the current time stamp.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
        </member>
        <member name="M:BasicxLogger.ILogger.LogId(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Logs the given message with the given tag, a message ID and the current time stamp.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
        </member>
        <member name="M:BasicxLogger.ILogger.LogCustomId(System.String,System.String)">
            <summary>
            Logs the given message, the given ID and the current time stamp.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be loged
            </param>
        </member>
        <member name="M:BasicxLogger.ILogger.LogCustomId(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Logs the given message with the given tag, the given ID and the current time stamp.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be loged
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
        </member>
        <member name="M:BasicxLogger.ILogger.LogAsync(System.String)">
            <summary>
            Asynchronous logs the given message and the current time stamp.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
        </member>
        <member name="M:BasicxLogger.ILogger.LogAsync(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message with the given tag and the current time stamp.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
        </member>
        <member name="M:BasicxLogger.ILogger.LogIdAsync(System.String,System.Boolean)">
            <summary>
            Asynchronous logs the given message, a message ID and the current time stamp.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
        </member>
        <member name="M:BasicxLogger.ILogger.LogIdAsync(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Asynchronous logs the given message with the given tag, a message ID and the current time stamp.
            </summary>
            <param name="message">
            The message that will be loged
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
        </member>
        <member name="M:BasicxLogger.ILogger.LogCustomIdAsync(System.String,System.String)">
            <summary>
            Asynchronous logs the given message, the given ID and the current time stamp.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be loged
            </param>
        </member>
        <member name="M:BasicxLogger.ILogger.LogCustomIdAsync(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message with the given tag, the given ID and the current time stamp.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be loged
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
        </member>
        <member name="T:BasicxLogger.LoggerDatabase.MySqlDatabase">
            <summary>
            Holds all informations about the MySqlDatabase used for logging
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerDatabase.MySqlDatabase.Server">
            <summary>
            URL of the MySql database server
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.LoggerDatabase.MySqlDatabase.DatabaseName">
            <summary>
            Name of the database that will contain the logs
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.LoggerDatabase.MySqlDatabase.User">
            <summary>
            Username of the database user you want to use
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.LoggerDatabase.MySqlDatabase.Password">
            <summary>
            Password of the given user
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.LoggerDatabase.MySqlDatabase.Port">
            <summary>
            Port of the database server
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.LoggerDatabase.MySqlDatabase.SslMode">
            <summary>
            SSL Mode setting
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="P:BasicxLogger.LoggerDatabase.MySqlDatabase.Connection">
            <summary>
            The database connection
            </summary>
            <remarks>
            Set by the constructor
            </remarks>
        </member>
        <member name="M:BasicxLogger.LoggerDatabase.MySqlDatabase.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor to creates a new MySqlDatabase object
            </summary>
            <param name="server">URL of the MySql database server</param>
            <param name="databaseName">Name of the database that will contain the logs</param>
            <param name="user">Username of the database user you want to use</param>
            <param name="password">Password of the given user</param>
            <param name="port">Port of the database server</param>
            <param name="sslMode">SSL Mode setting</param>
        </member>
        <member name="T:BasicxLogger.LoggerDirectory.LogDirectory">
            <summary>
            Contains all informations about the log directory
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerDirectory.LogDirectory.Path">
            <summary>
            Path were the log directory is located
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerDirectory.LogDirectory.Name">
            <summary>
            Name of the log directory
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerDirectory.LogDirectory.FullPath">
            <summary>
            Full directory path (path + name)
            </summary>
        </member>
        <member name="M:BasicxLogger.LoggerDirectory.LogDirectory.#ctor(System.String,System.String)">
            <summary>
            Constructor, to create a LogDirectory object.
            </summary>
            <remarks>
            Can be used to configure a custom directory for the logger
            </remarks>
            <param name="path">
            Path where the directory is located
            </param>
            <param name="name">
            Name of the log directory
            </param>
        </member>
        <member name="T:BasicxLogger.LoggerFile.FileType">
            <summary>
            Enum that contains every supported file type
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.txt">
            <summary>
            File type: .txt
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.log">
            <summary>
            File type: .log
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.xml">
            <summary>
            File type: .xml
            </summary>
        </member>
        <member name="F:BasicxLogger.LoggerFile.FileType.json">
            <summary>
            File type: .json
            </summary>
        </member>
        <member name="T:BasicxLogger.LoggerFile.LogFile">
            <summary>
            Contains all informations about the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerFile.LogFile.Name">
            <summary>
            Name of the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerFile.LogFile.Type">
            <summary>
            File type of the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.LoggerFile.LogFile.FullName">
            <summary>
            Full file name (name + file type : e.g. sample.txt)
            </summary>
        </member>
        <member name="M:BasicxLogger.LoggerFile.LogFile.#ctor(System.String,BasicxLogger.LoggerFile.FileType)">
            <summary>
            Constructor, to create a LogFile object.
            </summary>
            <remarks>
            Can be used to configure a custom file for the logger
            </remarks>
            <param name="name">
            Name of the log file
            </param>
            <param name="type">
            File type of the log file
            </param>
        </member>
        <member name="T:BasicxLogger.FileLogger">
            <summary>
            File logger that contains everything needed to write a message to a log file.
            </summary>
            <remarks>
            This logger supports the following file formats: txt, log, xml and json
            </remarks>
        </member>
        <member name="P:BasicxLogger.FileLogger.LoggingFile">
            <summary>
            Contains all informations about the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.FileDirectory">
            <summary>
            Contains all informations about the log directory
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.MessageFormat">
            <summary>
            Contains all informations about the formatting of the log messages
            </summary>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor">
            <summary>
            Constructor, to create a simple logger object that uses the default settings
            </summary>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.FileLogger.Log(System.String)">
            <summary>
            Writes the given message and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.Log(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Writes the given message with the given tag and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogId(System.String,System.Boolean)">
            <summary>
            Writes the given message, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogId(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Writes the given message with the given tag, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogCustomId(System.String,System.String)">
            <summary>
            Writes the given message, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogCustomId(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Writes the given message with the given tag, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogAsync(System.String)">
            <summary>
            Asynchronous writes the given message and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogAsync(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message with the given tag and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogIdAsync(System.String,System.Boolean)">
            <summary>
            Asynchronous writes the given message, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogIdAsync(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Asynchronous writes the given message with the given tag, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogCustomIdAsync(System.String,System.String)">
            <summary>
            Asynchronous writes the given message, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogCustomIdAsync(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message with the given tag, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.FileLogger.GetFullFilePath">
            <returns>
            The full file path (e.g. C:\mypath\myfile.txt)
            </returns>
        </member>
        <member name="M:BasicxLogger.FileLogger.DeleteLogFile">
            <summary>
            Deletes the log file, that was created by the logger.
            </summary>
            <remarks>
            All logs will be lost. If you log again after deleting the log file, the logger will create a new file.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="T:BasicxLogger.JsonLogger`1">
            <summary>
            A logger that allows you to log your owne objects to a json file
            </summary>
        </member>
        <member name="P:BasicxLogger.JsonLogger`1.LoggingFile">
            <summary>
            Contains all informations about the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.JsonLogger`1.FileDirectory">
            <summary>
            Contains all informations about the log directory
            </summary>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.#ctor">
            <summary>
            Constructor, to create a simple logger object that uses the default settings
            </summary>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.#ctor(System.String)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.#ctor(System.String,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.#ctor(BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,System.String)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.Log(`0)">
            <summary>
            Adds the given object to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="logObject">
            The object that will be added to the json file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.LogAsync(`0)">
            <summary>
            Asynchronous adds the given object to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="logObject">
            The object that will be added to the json file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.GetFullFilePath">
            <returns>
            The full file path (e.g. C:\mypath\myfile.json)
            </returns>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.DeleteLogFile">
            <summary>
            Deletes the log file, that was created by the logger.
            </summary>
            <remarks>
            All logs will be lost. If you log again after deleting the log file, the logger will create a new file.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="T:BasicxLogger.Logger">
            <summary>
            Default Logger class that contains everything needed to write a message to a log file.
            </summary>
            <remarks>
            This logger supports the following file formats: txt, log, xml and json
            </remarks>
        </member>
        <member name="P:BasicxLogger.Logger.logFile">
            <summary>
            Contains all informations about the log file
            </summary>
        </member>
        <member name="P:BasicxLogger.Logger.logDirectory">
            <summary>
            Contains all informations about the log directory
            </summary>
        </member>
        <member name="P:BasicxLogger.Logger.messageFormat">
            <summary>
            Contains all informations about the formatting of the log messages
            </summary>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor">
            <summary>
            Constructor, to create a simple logger object that uses the default settings
            </summary>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile,BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.LogMessageFormat)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerFile.LogFile,BasicxLogger.LoggerDirectory.LogDirectory)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.#ctor(BasicxLogger.Message.LogMessageFormat,BasicxLogger.LoggerDirectory.LogDirectory,BasicxLogger.LoggerFile.LogFile)">
            <summary>
            Constructor, to create a logger object with custom settings. 
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Logger.log(System.String)">
            <summary>
            Writes the given message and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.log(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Writes the given message with the given tag and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logID(System.String,System.Boolean)">
            <summary>
            Writes the given message, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logID(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Writes the given message with the given tag, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomID(System.String,System.String)">
            <summary>
            Writes the given message, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomID(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Writes the given message with the given tag, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logAsync(System.String)">
            <summary>
            Asynchronous writes the given message and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logAsync(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message with the given tag and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logIDAsync(System.String,System.Boolean)">
            <summary>
            Asynchronous writes the given message, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logIDAsync(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Asynchronous writes the given message with the given tag, a message ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your log file is.
            When the log file exceeds the length of 1,073,741,823 chars (a little over 1GB file size) the ID will not be verifyed.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomIDAsync(System.String,System.String)">
            <summary>
            Asynchronous writes the given message, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.logCustomIDAsync(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message with the given tag, the given ID and the current time stamp to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.Logger.getFullFilePath">
            <returns>
            The full file path (e.g. C:\mypath\myfile.txt)
            </returns>
        </member>
        <member name="M:BasicxLogger.Logger.deleteLogFile">
            <summary>
            Deletes the log file, that was created by the logger.
            </summary>
            <remarks>
            All logs will be lost. If you log again after deleting the log file, the logger will create a new file.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="T:BasicxLogger.MultiLogger">
            <summary>
            A logger that allows you to add all loggers that use the ILogger interface and 
            log with all of them by only using one log method call.
            </summary>
            <remarks>
            The multi logger supports all logger that uses the ILogger intaterface.
            </remarks>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Log(System.String)">
            <summary>
            Logs the given message and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Log(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Logs the given message with the given tag and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogId(System.String)">
            <summary>
            Logs the given message, a message ID and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            ID verification ist not supportet with the multi logger.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogId(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Logs the given message with the given tag, a message ID and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            ID verification ist not supportet with the multi logger.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogCustomId(System.String,System.String)">
            <summary>
            Logs the given message, the given ID and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogCustomId(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Logs the given message with the given tag, the given ID and the current time stampwith every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogAsync(System.String)">
            <summary>
            Asynchronous logs the given message and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogAsync(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message with the given tag and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogIdAsync(System.String)">
            <summary>
            Asynchronous logs the given message, a message ID and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            ID verification ist not supportet with the multi logger.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogIdAsync(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message with the given tag, a message ID and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            ID verification ist not supportet with the multi logger.
            </remarks>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogCustomIdAsync(System.String,System.String)">
            <summary>
            Asynchronous logs the given message, the given ID and the current time stamp with every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.logCustomIdAsync(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message with the given tag, the given ID and the current time stampwith every logger that was added to the multi logger.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <exception cref="T:BasicxLogger.NoLoggerAddedException"></exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.AddLogger(BasicxLogger.ILogger)">
            <summary>
            Adds the given logger to the multi logger
            </summary>
            <param name="logger">The logger to add</param>
        </member>
        <member name="T:BasicxLogger.MySqlLogger">
            <summary>
            Logger that contains everything needed to log to an MySql database.
            </summary>
        </member>
        <member name="P:BasicxLogger.MySqlLogger.Table">
            <summary>
            Name of the table the logger will create and insert logs into
            </summary>
        </member>
        <member name="P:BasicxLogger.MySqlLogger.Database">
            <summary>
            Holds all informations about the MySqlDatabase used for logging
            </summary>
        </member>
        <member name="P:BasicxLogger.MySqlLogger.DefaultTag">
            <summary>
            A default message tag that will be used if no tag is selected
            </summary>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.#ctor(BasicxLogger.LoggerDatabase.MySqlDatabase,System.String)">
            <summary>
            Constructor to create a MySqlLogger
            </summary>
            <remarks>
            The messege formate will use the default settings with this constructor
            </remarks>
            <param name="database">
            Holds all informations about the MySqlDatabase used for logging
            </param>
            <param name="logTable">
            Name of the table the logger will log to. This table will be created by the logger.
            </param>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.#ctor(BasicxLogger.LoggerDatabase.MySqlDatabase,System.String,BasicxLogger.Message.LogTag)">
            <summary>
            Constructor to create a MySqlLogger
            </summary>
            <param name="database">
            Holds all informations about the MySqlDatabase used for logging
            </param>
            <param name="logTable">
            Name of the table the logger will log to. This table will be created by the logger.
            </param>
            <param name="defaultTag">
            A default message tag that will be used if no tag is selected
            </param>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.Log(System.String)">
            <summary>
            Inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.Log(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogId(System.String,System.Boolean)">
            <summary>
            Inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your database is.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogId(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your database is.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogCustomId(System.String,System.String)">
            <summary>
            Inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogCustomId(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogAsync(System.String)">
            <summary>
            Asynchronous inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogAsync(BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogIdAsync(System.String,System.Boolean)">
            <summary>
            Asynchronous inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your database is.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogIdAsync(BasicxLogger.Message.LogTag,System.String,System.Boolean)">
            <summary>
            Asynchronous inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <param name="verifyMessageID">
            Set to true if you want to make sure the message id is unique.
            If set to true, the loging of the message may take longer an use more ram depending on how big your database is.
            </param>
            <returns>
            The message ID that was automatically assigned to the message. It can be used to identify a specific message.
            </returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogCustomIdAsync(System.String,System.String)">
            <summary>
            Asynchronous inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:BasicxLogger.MySqlLogger.LogCustomIdAsync(System.String,BasicxLogger.Message.LogTag,System.String)">
            <summary>
            Asynchronous inserts the given message and the current time stamp into the log table.
            </summary>
            <param name="id">
            The id of the log message
            </param>
            <param name="message">
            The message that will be writen to the file
            </param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="T:BasicxLogger.Message.DateFormat">
            <summary>
            Enum that contains every supported date format
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.year_month_day">
            <summary>
            Formate: "yyyy'/'MM'/'dd"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.year_day_month">
            <summary>
            Formate: "yyyy'/'dd'/'MM"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.day_month_year">
            <summary>
            Formate: "dd'/'MM'/'yyyy"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.month_day_year">
            <summary>
            Formate: "MM'/'dd'/'yyyy"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.DateFormat.none">
            <summary>
            Select, if you dont want to have the time in your log file
            </summary>
        </member>
        <member name="T:BasicxLogger.Message.LogDate">
            <summary>
            Contains the information about the date formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogDate.Format">
            <summary>
            Enum that contains the formate of the date
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogDate.Separator">
            <summary>
            Char that separates each part of the date
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogDate.FormatString">
            <summary>
            Format string for the date (e.g. yyyy'-'MM'-'dd)
            </summary>
        </member>
        <member name="M:BasicxLogger.Message.LogDate.#ctor(BasicxLogger.Message.DateFormat)">
            <summary>
            Constructor, to create a Date object.
            </summary>
            <remarks>
            Can be used to configure a custom date formate for the logger message formate
            </remarks>
            <param name="dateFormat">
            Enum that contains the formate of the date
            </param>
        </member>
        <member name="M:BasicxLogger.Message.LogDate.#ctor(BasicxLogger.Message.DateFormat,System.Char)">
            <summary>
            Constructor, to create a Date object.
            </summary>
            <remarks>
            Can be used to configure a custom date formate for the logger message formate
            </remarks>
            <param name="dateFormat">
            Enum that contains the formate of the date
            </param>
            <param name="dateSeparator">
            Char that separates each part of the date
            </param>
        </member>
        <member name="T:BasicxLogger.Message.LogMessageFormat">
            <summary>
            Contains all informations about the formatting of the log messages
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogMessageFormat.Date">
            <summary>
            Contains the information about the date formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogMessageFormat.Time">
            <summary>
            Contains the information about the time formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogMessageFormat.DefaultTag">
            <summary>
            A default message tag that will be used if no tag is selected
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogMessageFormat.TextEncoding">
            <summary>
            Encoding for the log message
            </summary>
            <remarks>
            This option is not supported for json logging and will be ignored if you log to a json file
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogTag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogTime)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate,BasicxLogger.Message.LogTime)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate,BasicxLogger.Message.LogTag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate,BasicxLogger.Message.LogTime,BasicxLogger.Message.LogTag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate,BasicxLogger.Message.LogTag,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate,BasicxLogger.Message.LogTime,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogDate,BasicxLogger.Message.LogTime,BasicxLogger.Message.LogTag,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogTime,BasicxLogger.Message.LogTag)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogTime,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="M:BasicxLogger.Message.LogMessageFormat.#ctor(BasicxLogger.Message.LogTime,BasicxLogger.Message.LogTag,System.Text.Encoding)">
            <summary>
            Constructor, to create a MessageFormate object with custom settings, that can be used to customize the logger
            </summary>
            <remarks>
            Everything that has no custom configuration will use the default settings.
            </remarks>
        </member>
        <member name="T:BasicxLogger.Message.LogTag">
            <summary>
            Enum that contains every message tag you can use
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.INFO">
            <summary>
            Tag: [INFO]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.WARNING">
            <summary>
            Tag: [WARNING]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.ERROR">
            <summary>
            Tag: [ERROR]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.FATAL">
            <summary>
            Tag: [FATAL]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.EXCEPTION">
            <summary>
            Tag: [EXCEPTION]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.DEBUGGING">
            <summary>
            Tag: [DEBUGGING]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.MESSAGE">
            <summary>
            Tag: [MESSAGE]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.ALERT">
            <summary>
            Tag: [ALERT]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.EVENT">
            <summary>
            Tag: [EVENT]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.TEST">
            <summary>
            Tag: [TEST]
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.LogTag.none">
            <summary>
            If you dont want to have a tag
            </summary>
        </member>
        <member name="T:BasicxLogger.Message.LogTime">
            <summary>
            Contains the information about the time formatting for the log message
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogTime.Format">
            <summary>
            Enum that contains the formate of the time
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogTime.FormatString">
            <summary>
            Format string for the time (e.g. HH:mm:ss)
            </summary>
        </member>
        <member name="P:BasicxLogger.Message.LogTime.CultureFormat">
            <summary>
            Holds the culture information to correctly display AM/PM, when the 12 hour time formate is used
            </summary>
        </member>
        <member name="M:BasicxLogger.Message.LogTime.#ctor(BasicxLogger.Message.TimeFormat)">
            <summary>
            Constructor, to create a Time object.
            </summary>
            <remarks>
            Can be used to configure a custom time formate for the logger message formate
            </remarks>
            <param name="timeFormat">
            Enum that contains the formate of the time
            </param>
        </member>
        <member name="M:BasicxLogger.Message.LogTime.#ctor(BasicxLogger.Message.TimeFormat,System.Globalization.CultureInfo)">
            <summary>
            Constructor, to create a Time object.
            </summary>
            <remarks>
            Can be used to configure a custom time formate for the logger message formate
            </remarks>
            <param name="timeFormat">
            Enum that contains the formate of the time
            </param>
            <param name="cultureInfo">
            The culture information to correctly display AM/PM, when the 12 hour time formate is used
            </param>
        </member>
        <member name="T:BasicxLogger.Message.TimeFormat">
            <summary>
            Enum that contains every supported time format
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour24_min">
            <summary>
            Formate: "HH:mm"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour24_min_sec">
            <summary>
            Formate: "HH:mm:ss"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour24_min_sec_millisec">
            <summary>
            Formate: "HH:mm:ss.fff"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour12_min">
            <summary>
            Formate:  "hh:mm tt"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour12_min_sec">
            <summary>
            Formate:  "hh:mm:ss tt"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.hour12_min_sec_millisec">
            <summary>
            Formate: "hh:mm:ss.fff tt"
            </summary>
        </member>
        <member name="F:BasicxLogger.Message.TimeFormat.none">
            <summary>
            Select, if you dont want to have the time in your log file
            </summary>
        </member>
        <member name="T:BasicxLogger.CustomJsonLogModel`1">
            <summary>
            Data model for the custom json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.CustomJsonLogModel`1.entrys">
            <summary>
            List of custom log objects
            </summary>
        </member>
        <member name="T:BasicxLogger.JsonLogModel">
            <summary>
            Data model for the json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.JsonLogModel.entrys">
            <summary>
            List of log messages
            </summary>
        </member>
        <member name="T:BasicxLogger.LogMessageModel">
            <summary>
            Data model for one log message in a json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.LogMessageModel.id">
            <summary>
            The log message id
            </summary>
        </member>
        <member name="P:BasicxLogger.LogMessageModel.timestamp">
            <summary>
            The log message timestamp
            </summary>
        </member>
        <member name="P:BasicxLogger.LogMessageModel.tag">
            <summary>
            The log message tag
            </summary>
        </member>
        <member name="P:BasicxLogger.LogMessageModel.message">
            <summary>
            The log message
            </summary>
        </member>
    </members>
</doc>
