<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BasicxLogger</name>
    </assembly>
    <members>
        <member name="T:BasicxLogger.Databases.SqlServerDatabase">
            <summary>
            Class that represents a Sql database for the BasicxLogger
            </summary>
        </member>
        <member name="P:BasicxLogger.Databases.SqlServerDatabase.Server">
            <summary>
            Gets the URL of the Sql database server
            </summary>
        </member>
        <member name="P:BasicxLogger.Databases.SqlServerDatabase.Database">
            <summary>
            Gets the name of the database that will contain the logs
            </summary>
        </member>
        <member name="P:BasicxLogger.Databases.SqlServerDatabase.Table">
            <summary>
            Gets the name of the table the logger will create and insert logs into
            </summary>
        </member>
        <member name="M:BasicxLogger.Databases.SqlServerDatabase.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Databases.SqlServerDatabase"/> class.
            </summary>
            <param name="server">URL of the Sql Server</param>
            <param name="database">Name of the database that will contain the logs</param>
            <param name="table">Name of the table the logger will create and insert logs into</param>
            <param name="user">Username of the database user you want to use</param>
            <param name="password">Password of the given user</param>
        </member>
        <member name="M:BasicxLogger.Databases.SqlServerDatabase.LogToDatabase(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the Table in the Database.
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Files.JsonLogFile">
            <summary>
            Class that represents a log file with the file extension .json
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.JsonLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.JsonLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.JsonLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.JsonLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="M:BasicxLogger.Files.JsonLogFile.WriteToFile``1(``0)">
            <summary>
            Writes the given object to the log file
            </summary>
            <param name="logObject">The object that will be writen to the json file</param>
        </member>
        <member name="T:BasicxLogger.Files.LogLogFile">
            <summary>
            Class that represents a log file with the file extension .log
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.LogLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.LogLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.LogLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.LogLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Files.TxtLogFile">
            <summary>
            Class that represents a log file with the file extension .txt
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.TxtLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.TxtLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.TxtLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.TxtLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.Files.XmlLogFile">
            <summary>
            Class that represents a log file with the file extension .xml
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.TextEncoding">
            <summary>
            Gets or Sets the text encoding for the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.DirectoryName">
            <summary>
            Gets a string representing the directory's full path
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.FullName">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:BasicxLogger.Files.XmlLogFile.Extension">
            <summary>
            Gets the string representing the extension part of the file
            </summary>
        </member>
        <member name="M:BasicxLogger.Files.XmlLogFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Files.XmlLogFile"/> class
            </summary>
            <param name="directoryPath">The path where the file will be stored</param>
            <param name="fileName">The name of the file, without the extension</param>
        </member>
        <member name="M:BasicxLogger.Files.XmlLogFile.WriteToFile(BasicxLogger.LogTag,System.String,System.String,System.String)">
            <summary>
            Writes a log message with the given data to the log file
            </summary>
            <param name="messageTag">The message tag for the log message</param>
            <param name="timestamp">The timestamp for the log message</param>
            <param name="message">The message that should be logged</param>
            <param name="id">The id for the log message</param>
        </member>
        <member name="T:BasicxLogger.IdHandler">
            <summary>
            A static class used for id generation
            </summary>
        </member>
        <member name="P:BasicxLogger.IdHandler.UniqueId">
            <summary>
            Gets a unique id string
            </summary>
            <returns>
            A string that conatins a unique id
            </returns>
        </member>
        <member name="T:BasicxLogger.Exceptions.NoLoggerAddedException">
            <summary>
            The exception that is thrown when a Log method of the <see cref="T:BasicxLogger.MultiLogger"/> is called 
            but no <see cref="T:BasicxLogger.Base.ILogger"/> was added befor  
            </summary>
        </member>
        <member name="M:BasicxLogger.Exceptions.NoLoggerAddedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Exceptions.NoLoggerAddedException"/> class
            </summary>
        </member>
        <member name="M:BasicxLogger.Exceptions.NoLoggerAddedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Exceptions.NoLoggerAddedException"/> class
            </summary>
        </member>
        <member name="M:BasicxLogger.Exceptions.NoLoggerAddedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.Exceptions.NoLoggerAddedException"/> class
            </summary>
        </member>
        <member name="T:BasicxLogger.DatabaseLogger">
            <summary>
            Logger that contains everything needed to log to an MySql database.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.Database">
            <summary>
            Gets the database that the logger uses.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.MessageTimestamp">
            <summary>
            Gets or Sets the <see cref="T:BasicxLogger.Timestamp"/> that is used by the logger.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.DefaultTag">
            <summary>
            Gets or Sets a default message tag that will be used if no tag is selected.
            </summary>
        </member>
        <member name="P:BasicxLogger.DatabaseLogger.UseId">
            <summary>
            Gets or Sets if each log entry should contain a unique id or not.
            </summary>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.#ctor(BasicxLogger.Base.ILogDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.DatabaseLogger"/> class.
            </summary>
            <param name="database">The database the logger should use.</param>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.Log(System.String)">
            <summary>
            Writes the given message to the table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.Log(BasicxLogger.LogTag,System.String)">
            <summary>
            Writes the given message to the table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.LogAsync(System.String)">
            <summary>
            Asynchronous writes the given message to the table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.DatabaseLogger.LogAsync(BasicxLogger.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message to table.
            </summary>
            <param name="message">The message that will be writen to the table</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.DatabaseLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="T:BasicxLogger.FileLogger">
            <summary>
            File logger that contains everything needed to write a message to a log file.
            </summary>
            <remarks>
            This logger supports the following file formats: txt, log, xml and json
            </remarks>
        </member>
        <member name="P:BasicxLogger.FileLogger.LogFile">
            <summary>
            Gets the <see cref="T:BasicxLogger.Base.ILogFile"/> that is used by the logger.
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.MessageTimestamp">
            <summary>
            Gets or Sets the <see cref="T:BasicxLogger.Timestamp"/> that is used by the logger.
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.DefaultTag">
            <summary>
            Gets or Sets a default message tag that will be used if no tag is selected.
            </summary>
        </member>
        <member name="P:BasicxLogger.FileLogger.UseId">
            <summary>
            Gets or Sets if each log entry should contain a unique id or not.
            </summary>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.FileLogger"/> class,
            that uses the default settings.
            </summary>
        </member>
        <member name="M:BasicxLogger.FileLogger.#ctor(BasicxLogger.Base.ILogFile)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.FileLogger"/> class.
            </summary>
            <param name="logFile">The log file of the logger</param>
        </member>
        <member name="M:BasicxLogger.FileLogger.Log(System.String)">
            <summary>
            Writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.FileLogger.Log(BasicxLogger.LogTag,System.String)">
            <summary>
            Writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogAsync(System.String)">
            <summary>
            Asynchronous writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="M:BasicxLogger.FileLogger.LogAsync(BasicxLogger.LogTag,System.String)">
            <summary>
            Asynchronous writes the given message to the log file.
            </summary>
            <param name="message">The message that will be writen to the file</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            The unique id for the log entry if <see cref="P:BasicxLogger.FileLogger.UseId"/> is true 
            or null if <see cref="P:BasicxLogger.FileLogger.UseId"/> is false.
            </returns>
        </member>
        <member name="T:BasicxLogger.JsonLogger`1">
            <summary>
            A logger that allows you to log your owne objects to a json file
            </summary>
        </member>
        <member name="P:BasicxLogger.JsonLogger`1.LogFile">
            <summary>
            Gets the <see cref="T:BasicxLogger.Files.JsonLogFile"/> that is used by the logger.
            </summary>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.#ctor(BasicxLogger.Files.JsonLogFile)">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.JsonLogger`1"/> class.
            </summary>
            <param name="jsonLogFile">The json log file used by the logger</param>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.Log(`0)">
            <summary>
            Adds the given object to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="logObject">
            The object that will be added to the json file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:BasicxLogger.JsonLogger`1.LogAsync(`0)">
            <summary>
            Asynchronous adds the given object to the log file.
            </summary>
            <remarks>
            If the log file and/or directory is missing, the method will automatically create them.
            </remarks>
            <param name="logObject">
            The object that will be added to the json file
            </param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="T:BasicxLogger.MultiLogger">
            <summary>
            A logger that allows you to add all loggers that use the ILogger interface and 
            log with all of them by only using one log method call.
            </summary>
            <remarks>
            The multi logger supports all logger that uses the ILogger intaterface.
            </remarks>
        </member>
        <member name="P:BasicxLogger.MultiLogger.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:BasicxLogger.MultiLogger"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:BasicxLogger.MultiLogger"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:BasicxLogger.MultiLogger.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:BasicxLogger.MultiLogger"/>.
            </returns>
        </member>
        <member name="P:BasicxLogger.MultiLogger.System#Collections#Generic#IList{BasicxLogger#Base#ILogger}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>
            The element at the specified index.
            </returns>
        </member>
        <member name="P:BasicxLogger.MultiLogger.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>
            The element at the specified index.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BasicxLogger.MultiLogger"/> class
            </summary>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Log(System.String)">
            <summary>
            Logs the given message with every <see cref="T:BasicxLogger.Base.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
            <exception cref="T:BasicxLogger.Exceptions.NoLoggerAddedException">
            The <see cref="T:BasicxLogger.MultiLogger"/> does not contain any <see cref="T:BasicxLogger.Base.ILogger"/>.
            </exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Log(BasicxLogger.LogTag,System.String)">
            <summary>
            Logs the given message with every <see cref="T:BasicxLogger.Base.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
            <exception cref="T:BasicxLogger.Exceptions.NoLoggerAddedException">
            The <see cref="T:BasicxLogger.MultiLogger"/> does not contain any <see cref="T:BasicxLogger.Base.ILogger"/>.
            </exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogAsync(System.String)">
            <summary>
            Asynchronous logs the given message with every <see cref="T:BasicxLogger.Base.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
            <exception cref="T:BasicxLogger.Exceptions.NoLoggerAddedException">
            The <see cref="T:BasicxLogger.MultiLogger"/> does not contain any <see cref="T:BasicxLogger.Base.ILogger"/>.
            </exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.LogAsync(BasicxLogger.LogTag,System.String)">
            <summary>
            Asynchronous logs the given message with every <see cref="T:BasicxLogger.Base.ILogger"/> 
            that was added to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="message">The message that will be logged</param>
            <param name="messageTag">
            A Tag that will be added to the message, to make it easy to distinguish between differen log messages
            </param>
            <returns>
            A string array conataining all message id's that each logger returned.
            </returns>
            <exception cref="T:BasicxLogger.Exceptions.NoLoggerAddedException">
            The <see cref="T:BasicxLogger.MultiLogger"/> does not contain any <see cref="T:BasicxLogger.Base.ILogger"/>.
            </exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.IndexOf(BasicxLogger.Base.ILogger)">
            <summary>
            Determines the index of a specific item in the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Insert(System.Int32,BasicxLogger.Base.ILogger)">
            <summary>
            Inserts an item to the <see cref="T:BasicxLogger.MultiLogger"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:BasicxLogger.MultiLogger"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:BasicxLogger.MultiLogger"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:BasicxLogger.MultiLogger"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Add(BasicxLogger.Base.ILogger)">
            <summary>
            Adds an item to the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Clear">
            <summary>
            Removes all items from the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Contains(BasicxLogger.Base.ILogger)">
            <summary>
            Determines whether the <see cref="T:BasicxLogger.MultiLogger"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <returns>
            true if item is found in the System.Collections.Generic.ICollection`1; otherwise, false.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.CopyTo(BasicxLogger.Base.ILogger[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:BasicxLogger.MultiLogger"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements copied 
            from <see cref="T:BasicxLogger.MultiLogger"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in the source <see cref="T:BasicxLogger.MultiLogger"/>
            is greater than the available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.Remove(BasicxLogger.Base.ILogger)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:BasicxLogger.MultiLogger"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:BasicxLogger.MultiLogger"/>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:BasicxLogger.MultiLogger"/> otherwise, false. 
            This method also returns false if item is not found in the original <see cref="T:BasicxLogger.MultiLogger"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:BasicxLogger.MultiLogger"/> is read-only.</exception>
        </member>
        <member name="M:BasicxLogger.MultiLogger.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BasicxLogger.Base.ILogger"/> collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the <see cref="T:BasicxLogger.Base.ILogger"/> collection.
            </returns>
        </member>
        <member name="M:BasicxLogger.MultiLogger.System#Collections#Generic#IEnumerable{BasicxLogger#Base#ILogger}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BasicxLogger.Base.ILogger"/> collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to
            iterate through the <see cref="T:BasicxLogger.Base.ILogger"/> collection.
            </returns>
        </member>
        <member name="T:BasicxLogger.Models.JsonLogModel`1">
            <summary>
            Data model for the json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.JsonLogModel`1.Entrys">
            <summary>
            List of log messages
            </summary>
        </member>
        <member name="T:BasicxLogger.Models.LogMessageModel">
            <summary>
            Data model for one log message in a json log file
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.Id">
            <summary>
            The log message id
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.Timestamp">
            <summary>
            The log message timestamp
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.Tag">
            <summary>
            The log message tag
            </summary>
        </member>
        <member name="P:BasicxLogger.Models.LogMessageModel.Message">
            <summary>
            The log message
            </summary>
        </member>
    </members>
</doc>
